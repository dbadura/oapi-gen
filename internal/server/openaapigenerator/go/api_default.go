/*
 * Todo app OAS
 *
 * OpenApi specification for a todo application
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package test

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{ 
		{
			"CreateTodo",
			strings.ToUpper("Post"),
			"/todos",
			c.CreateTodo,
		},
		{
			"DeleteTodo",
			strings.ToUpper("Delete"),
			"/todos/{todoId}",
			c.DeleteTodo,
		},
		{
			"GetTodos",
			strings.ToUpper("Get"),
			"/todos",
			c.GetTodos,
		},
		{
			"UpdateTodo",
			strings.ToUpper("Put"),
			"/todos/{todoId}",
			c.UpdateTodo,
		},
	}
}

// CreateTodo - 
func (c *DefaultApiController) CreateTodo(w http.ResponseWriter, r *http.Request) {
	todo := Todo{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&todo); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTodoRequired(todo); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateTodo(r.Context(), todo)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteTodo - 
func (c *DefaultApiController) DeleteTodo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	todoId, err := parseInt32Parameter(params["todoId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.DeleteTodo(r.Context(), todoId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTodos - 
func (c *DefaultApiController) GetTodos(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	user := query.Get("user")
	status := query.Get("status")
	result, err := c.service.GetTodos(r.Context(), user, status)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateTodo - 
func (c *DefaultApiController) UpdateTodo(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	todoId, err := parseInt32Parameter(params["todoId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

				task := r.FormValue("task")
				status := r.FormValue("status")
	result, err := c.service.UpdateTodo(r.Context(), todoId, task, status)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
